What is Inheritance?

Inheritance, in the context of object-oriented programming (OOP), refers to a fundamental concept where a new class 
(called a subclass or derived class) can inherit attributes and behaviors (such as methods and properties) from an 
existing class (called a superclass or base class). This allows for code reuse, modularity, and the creation of more 
specialized classes based on existing ones.

Inheritance forms an "is-a" relationship between classes, meaning that a subclass is considered to be a more 
specialized version of its superclass. The subclass inherits all the non-private members (attributes and methods) of 
the superclass and can also add its own additional members or override existing ones.

Here's a simple example in a hypothetical programming language:

class Animal:
    def __init__(self, name):
        self.name = name
    
    def speak(self):
        pass

class Dog(Animal):
    def speak(self):
        return "Woof!"

class Cat(Animal):
    def speak(self):
        return "Meow!"

In this example, the Animal class is the superclass, while Dog and Cat are subclasses. 
Both Dog and Cat inherit the name attribute and the speak method from the Animal class. 
However, each subclass overrides the speak method to provide its own implementation.

Inheritance promotes code reusability and allows for the creation of a hierarchy of classes with shared characteristics 
and behaviors. However, it's important to use inheritance wisely to avoid creating overly complex and tightly 
coupled class hierarchies. In some cases, composition (combining multiple classes) might be a more appropriate design 
choice than deep inheritance hierarchies.