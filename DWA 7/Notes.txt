Single Responsibility Principle: https://www.youtube.com/watch?v=UQqY3_6Epbg
Open/Closed Principle Explained: https://www.youtube.com/watch?v=-ptMtJAdj40
Liskov Substitution Principle Explained: https://www.youtube.com/watch?v=dJQMqNOC4Pc
Interface Segregation Principle Explained: https://www.youtube.com/watch?v=JVWZR23B_iE
Dependency Inversion Principle (DIP) Explained:https://www.youtube.com/watch?v=9oHY5TllWaU

Let's do a quick overview of how to implement abstraction in JavaScript with SOLID, before diving into the first lecture, 
'Creating Abstraction with SOLID'.

* Single Responsibility Principle (SRP): This principle states that a class or module should have only one reason to change. 
    To apply SRP in JavaScript, you can create separate modules or classes that handle specific tasks or responsibilities. 
    Each module or class should be responsible for a single functionality or feature, and should not be coupled with other 
    functionalities.

* Open-Closed Principle (OCP): This principle states that software entities (classes, modules, functions, etc.) 
    should be open for extension but closed for modification. In JavaScript, you can apply this principle by creating 
    abstract classes or interfaces that define a set of methods or properties. 
    Concrete classes can then inherit from these abstract classes or interfaces and implement their methods. 
    This way, you can add new functionalities without modifying existing code.

* Liskov Substitution Principle (LSP): This principle states that objects of a superclass should be replaceable with objects 
    of a subclass without affecting the correctness of the program. In JavaScript, you can implement LSP by ensuring that 
    subclasses inherit all the properties and methods of their superclass, and do not alter their behavior in unexpected ways.

* Interface Segregation Principle (ISP): This principle states that a client should not be forced to depend on methods it 
    does not use. In JavaScript, you can apply ISP by creating small, focused interfaces that define only the methods that a 
    client needs. This way, you can avoid creating large, bloated interfaces that are difficult to maintain and understand.

* Dependency Inversion Principle (DIP): This principle states that high-level modules should not depend on low-level modules. 
    Instead, both should depend on abstractions. In JavaScript, you can implement DIP by using dependency injection, 
    which allows you to pass dependencies to a module or class rather than creating them inside. This way, you can decouple 
    modules and make them more reusable and testable.

Programming Paradigms 

Paradigms are ways of programming, relatively unrelated to languages, a Paradigm tells
you which programming structures to use, and when to use them.

Too date, there have been three such paradigms.For reasons we shall discuss later,
the are unlikely to be any other.


*   Structured Programming 
    The first Paradigm to be adopted (but not the first to be invented) was structured programming, which was discovered
    by Edsger wybe Dijkstra in 1968. dijkstra showed that the use of unrestrained jumps (goto statement) is harmful 
    to program structure. As we'll see in the chapter that follow, he replaced those jumps with the more familiar 
    if/then/else and do/while/until constructs.
        We can Summarize the SP paradigm as Follows:

        "SP imposes discipline on direct transfer of control"

*   Object orientated programming
    The second paradigm to be adopted was actually discovered two years earlier. in 1966, by ole johan Dahl and Kriten Nygaard.
    these two programmers noticed that the function call stack frame in the ALGOL language could be moved to a heap,
    there by allowing local variables declared by a function to exist long after the function returned.
    The function became a constructor for a class, the local variables became instance variables, and the nested
    functions became methods. This led inevitably to the discovery of polymorphism through the disciplined use of function pointers.
        We can Summarize the OOP paradigm as Follows:

        "OOP imposes discipline on indirect transfer of control"

*   Functional Programming 
    the third paradigm, which has only recently begun to be adopted, was the first to be invented. Indeed, its 
    invention predates computer programming itself. Functional programming is the direct result of the work of alonzoz Church,
    who in 1936 invented a-Calculus while pursuing the same mathematical problem that was motivating Alan Turning
    at the same time. His a - Calculus is the foundation of the LISP language, invented in 1958 by john MCarthy.
    A foundational notion of A-Calculus is immutability --that is, the notion that the values of symbols do not change.
    This effectively means that a functional language has no assignment statement. Most functional languages do, in fact,
    have some means to alter the value of a variable, but only under very strict discipline.
        We can Summarize the FP paradigm as Follows:
        
        "FP imposes discipline upon  assignment"